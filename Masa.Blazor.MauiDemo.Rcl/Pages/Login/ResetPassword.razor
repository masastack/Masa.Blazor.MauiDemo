@page "/reset-password/{phone}/{confirmCode}"
@layout LoginLayout
@attribute [AllowAnonymous]
@inject UserService UserService
@inject PageStackNavController NavController
@inject IPopupService PopupService

<PStackPageBar Title="@(SignUp ? "Set Password" : "Reset Password")"></PStackPageBar>

<MForm @ref="_form" Class="login">
    <div class="secondary--text body-2 my-12">
        Please enter your new password and confirm it.
    </div>
    <MTextField @bind-Value="_password"
                Type="password"
                Rules="@( [PasswordRule])"
                Placeholder="New Password"
                HideDetails="@("auto")"
                AutoFocus>
    </MTextField>
    <MTextField @bind-Value="_confirmPassword"
                Type="password"
                Rules="@( [PasswordRule, _confirmPasswordRule])"
                Placeholder="Confirm Password"
                HideDetails="@("auto")">
    </MTextField>
    <MButton Block
             Class="text-capitalize"
             Rounded
             Large
             Color="primary"
             Disabled="@LoginBtnDisabled"
             Loading="@_loading"
             OnClick="@ResetPasswordAndNavigateToLogin">
        Confirm
    </MButton>
</MForm>

@code {

    [Parameter] public string Phone { get; set; } = null!;
    [Parameter] public string ConfirmCode { get; set; } = null!;
    [SupplyParameterFromQuery] public bool SignUp { get; set; }

    private static readonly Func<string?, StringBoolean> PasswordRule = value =>
    {
        if (value is not null && value.Length >= 6)
        {
            return true;
        }

        return "Password must be at least 6 characters long";
    };

    private string? _password;
    private string? _confirmPassword;
    private Func<string?, StringBoolean> _confirmPasswordRule = _ => true;
    private MForm? _form;
    private bool _loading;

    private bool LoginBtnDisabled => string.IsNullOrWhiteSpace(_password) || string.IsNullOrWhiteSpace(_confirmPassword);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _confirmPasswordRule = (value) =>
        {
            if (value is not null && value == _password)
            {
                return true;
            }

            return "Passwords do not match";
        };
    }

    private async Task ResetPasswordAndNavigateToLogin()
    {
        if (_form?.Validate() is true)
        {
            _loading = true;
            StateHasChanged();

            var success = await UserService.ResetPasswordAsync(Phone, _password, ConfirmCode);
            _loading = false;
            if (success)
            {
                await PopupService.EnqueueSnackbarAsync($"Password {(SignUp ? "set" : "reset")} successfully. Please login.", AlertTypes.Success);
                NavController.GoBackToTab("/login");
            }
            else
            {
                await PopupService.EnqueueSnackbarAsync("Invalid request", AlertTypes.Error);
            }
        }
    }

}